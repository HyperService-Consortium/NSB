package math

import (
	"github.com/HyperService-Consortium/NSB/util"
	"bytes"
	"errors"
	"fmt"
)


type Uint256 struct {
	rep [4]uint64
}

func NewUint256FromUint64(data ...uint64) (*Uint256, error){
	if len(data) > 4 {
		return nil, errors.New("too many args")
	}
	var x Uint256
	for idx, dat := range data {
		x.rep[idx] = dat
	}
	return &x, nil
}

func NewUint256FromBytes(data []byte) (*Uint256, error){
	if len(data) > 32 {
		return nil, errors.New("the length of data must not exceed 32")
	}

	var buff = bytes.NewBuffer(make([]byte, 32 - len(data)))
	buff.Write(data)

	var tmpbytes = make([]byte, 8)
	var x Uint256
	
	buff.Read(tmpbytes)
	x.rep[3] = util.BytesToUint64(tmpbytes)
	buff.Read(tmpbytes)
	x.rep[2] = util.BytesToUint64(tmpbytes)
	buff.Read(tmpbytes)
	x.rep[1] = util.BytesToUint64(tmpbytes)
	buff.Read(tmpbytes)
	x.rep[0] = util.BytesToUint64(tmpbytes)
	return &x, nil
}


func (x *Uint256) Bytes() []byte {
	return util.ConcatBytes(
		util.Uint64ToBytes(x.rep[3]),
		util.Uint64ToBytes(x.rep[2]),
		util.Uint64ToBytes(x.rep[1]),
		util.Uint64ToBytes(x.rep[0]),
	)
}


func (x *Uint256) AddUint256(y *Uint256) bool {
	var c uint64
	x.rep[0] = x.rep[0] + y.rep[0]
	c = ((x.rep[0]>>63) + (y.rep[0]>>63) + ((((x.rep[0]<<1)>>1) + ((y.rep[0]<<1)>>1) + c) >> 63)) >> 1
	x.rep[1] = x.rep[1] + y.rep[1] + c
	c = ((x.rep[1]>>63) + (y.rep[1]>>63) + ((((x.rep[1]<<1)>>1) + ((y.rep[1]<<1)>>1) + c) >> 63)) >> 1
	x.rep[2] = x.rep[2] + y.rep[2] + c
	c = ((x.rep[2]>>63) + (y.rep[2]>>63) + ((((x.rep[2]<<1)>>1) + ((y.rep[2]<<1)>>1) + c) >> 63)) >> 1
	x.rep[3] = x.rep[3] + y.rep[3] + c
	c = ((x.rep[3]>>63) + (y.rep[3]>>63) + ((((x.rep[3]<<1)>>1) + ((y.rep[3]<<1)>>1) + c) >> 63)) >> 1
	return c != 0
}

func (x *Uint256) String() string {
	if x.rep[3] == 0 && x.rep[2] == 0 {
		if x.rep[1] == 0 {
			return string(x.rep[0])
		}
		return fmt.Sprintf("%d%064d", x.rep[1], x.rep[0])
	} else {
		if x.rep[3] == 0 {
			return fmt.Sprintf("%d%064d%064d", x.rep[2], x.rep[1], x.rep[0])
		}
		return fmt.Sprintf("%d%064d%064d%064d", x.rep[3], x.rep[2], x.rep[1], x.rep[0])
	}
}


func (x *Uint256) SubUint256(y *Uint256) bool {
	var c bool
	return c
}
